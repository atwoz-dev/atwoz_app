language: ko-KR
tone_instructions: >
  You are a senior software engineer.
  Use original English terms for all technical jargon.
  Be direct and straightforward—avoid unnecessary phrasing.
  Always maintain a respectful and formal tone, using precise domain terminology.
early_access: true
enable_free_tier: true

reviews:
  profile: chill
  request_changes_workflow: false
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai summary"
  high_level_summary_in_walkthrough: false
  auto_title_placeholder: "@coderabbitai"
  review_status: true
  commit_status: true
  fail_commit_status: false
  collapse_walkthrough: false
  changed_files_summary: false
  sequence_diagrams: true
  related_issues: false
  related_prs: false
  suggested_labels: false
  auto_apply_labels: false
  suggested_reviewers: false
  auto_assign_reviewers: false
  poem: false
  labeling_instructions: []
  path_filters:
    - "**/*.dart"
    - "!**/*.g.dart"
    - "!**/*.freezed.dart"
    - "!**/*.mocks.dart"
  path_instructions:
    - path: "**/*.dart"
      instructions: >
        In addition to existing rules, review code based on:
        - **Clean Architecture**: Maintain clear separation of concerns (UI, business logic, data layers).
        - Prefer small, single-purpose functions and methods. Avoid functions with more than 50 lines of code.
        - Maintain a consistent naming convention, following Dart’s recommended style guide.
        - Enforce the use of async/await for asynchronous code and avoid callback hell.
        - Use streams and Futures properly, ensuring that there is clear error handling for async code.
        - Apply **SOLID principles** to classes, methods
        - Avoid unnecessary comments. Code should be self-explanatory with meaningful names.
        - Use comments only when the code's intent is not immediately obvious, and avoid redundant explanations.
        - If a comment is necessary, describe the *why*, not the *what* (the code itself should explain the *what*).

    - path: "**/*.dart"
      instructions: >
        **UI Components (Widgets)**:
        - Widgets should be simple and declarative. Avoid overcomplicating widget trees.
        - When possible, use `StatelessWidget` over `StatefulWidget` to keep the UI simple and prevent unnecessary state updates.
        - Avoid large widget files. Break down large widgets into smaller reusable components.
        - Keep widget constructors minimal and avoid placing business logic directly in widget code.

    - path: "**/*.dart"
      instructions: >
        **Bug Prevention**:
        - Always handle errors in async operations. Don’t leave potential failures unhandled.
        - When dealing with nullable types, use null safety features (`?`, `!`, `late`), and avoid null pointer exceptions.
        - Avoid using global variables or mutable states. Encapsulate state within classes and use state management tools.
        - Minimize side effects in functions and methods. Ensure that methods have clear and predictable behaviors.

    - path: "**/*.dart"
      instructions: >
        **Code Smells**:
        - Avoid large classes with too many responsibilities (violates SRP).
        - Refactor large switch/case statements and nested if/else blocks. Use polymorphism or strategy patterns when applicable.
        - Avoid deeply nested widget trees that make it difficult to follow logic.
        - Prevent the use of "magic numbers" or hardcoded strings. Use constants or enums instead.
        - Avoid duplicate code by creating reusable components and functions.

    - path: "features/**/data/dto/**"
      instructions: >
        DTO files should be immutable, concise, and use freezed for easy maintenance.
        Ensure that DTOs only contain data and no business logic.
    - path: "features/**/data/repository/**"
      instructions: >
        Repositories should abstract the interaction with external data sources.
        Follow single responsibility principle (SRP) and ensure separation of concerns.
    - path: "features/**/domain/usecase/**"
      instructions: >
        Usecase classes should encapsulate a single business logic and return results in a consistent manner.
        Keep the logic simple and decouple it from UI-related code.
    - path: "features/**/presentation/page/**"
      instructions: >
        Pages should manage UI logic only. Complex business logic should be handled by the domain layer.
    - path: "features/**/presentation/widget/**"
      instructions: >
        Widgets should be reusable and small. Avoid placing any business logic or state management here.

  abort_on_close: true
  disable_cache: false
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: true
    base_branches: []

chat:
  auto_reply: true

knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    usage: auto
    project_keys: []
  pull_requests:
    scope: auto
