// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:firebase_core/firebase_core.dart';
import 'package:atwoz_app/core/util/shared_preference/shared_preference_manager.dart';
import 'package:atwoz_app/core/util/shared_preference/shared_preference_key.dart';
import 'package:flutter/material.dart';

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const android = FirebaseOptions(
    apiKey: 'AIzaSyASM-SDzJunJX0AIDz3oMDspAvYRaPuzA8',
    appId: '1:1049288044004:android:f8bef7c1295f7fa0ac2bf1',
    messagingSenderId: '1049288044004',
    projectId: 'atwoz-d63ef',
    storageBucket: 'atwoz-d63ef.firebasestorage.app',
  );

  static const ios = FirebaseOptions(
    apiKey: 'AIzaSyCtXCmlKUzCliCIxjFTLJ_EekCNSFvVbHs',
    appId: '1:1049288044004:ios:c0b0f3f24e4fd48eac2bf1',
    messagingSenderId: '1049288044004',
    projectId: 'atwoz-d63ef',
    storageBucket: 'atwoz-d63ef.firebasestorage.app',
    iosBundleId: 'com.gooemeet.atwoz',
  );
}

Future<void> initializeFirebase() async {
  // Initialize Firebase
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Request notification permissions
  final notificationSettings =
      await FirebaseMessaging.instance.requestPermission(provisional: true);

  final notificationStatus = notificationSettings.authorizationStatus;

  // For apple platforms, ensure the APNS token is available before making any FCM plugin API calls
  final apnsToken = await FirebaseMessaging.instance.getAPNSToken();
  if (apnsToken != null) {
    // APNS token is available, make FCM plugin API requests...
  }

  // Register FCM token
  await FirebaseMessaging.instance.getToken(
    vapidKey:
        "BHYbT4bWQqQx2MtDVhlbSjLrmz2fowcmt-o6h1igZFwoEzF4iEBrDTPs7DMlIfAajiktoYMPwxvvkUnU8IwaBlc",
  );

  // TODO: request registration fcm Token to server
  FirebaseMessaging.instance.onTokenRefresh.listen((newToken) async {
    // save token to server
  });

  // Register background/foreground FCM event handlers
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  FirebaseMessaging.onMessage.listen(_firebaseMessagingForegroundHandler);
}

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // Handle background message
  debugPrint('Handling a background message: ${message.messageId}');
}

void _firebaseMessagingForegroundHandler(RemoteMessage message) {
  // Handle foreground message
  debugPrint('Handling a foreground message: ${message.messageId}');
}
